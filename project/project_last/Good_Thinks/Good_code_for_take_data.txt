.data  
fin: .asciiz "project_input.txt"
equation : .space 1024
equation1: .space 1024            # Allocate 1024 bytes for writable space
equation2: .space 1024
equation3: .space 1024
buffer:    .space 1
line:      .space 1024
count:     .word 0                     # Counter to store the equation count
De_count:  .word 0
max_count: .word 4
#save equation1 coffictiont
x1:        .word 0
y1:        .word 0
z1:        .word 0
constant1:        .word 0
x2:        .word 0
y2:        .word 0
z2:        .word 0
constant2:        .word 0
x3:        .word 0
y3:        .word 0
z3:        .word 0
constant3:        .word 0

newline:         .asciiz "\n"
output_x:        .asciiz "Coefficient of x: "
output_y:        .asciiz "Coefficient of y: "
output_z:        .asciiz "Coefficient of z: "
output_result:   .asciiz "Result: "

newline_msg: .asciiz "Newline character found in buffer.\n"
error_message: .asciiz "Error: Invalid equation format. Please enter an equation with exactly 2 or 3 variables (x, y, and optionally z) only.\n"

.globl main
.text

main:
    la $k1, buffer
    la $k0, line
    li $s3, 0           	  # current line length

    # open file
    li $v0, 13            	  # syscall for open file
    la $a0, fin         	  # input file name
    li $a1, 0            	  # read flag
    li $a2, 0          	  	  # ignore mode 
    syscall             	  # open file 
    move $s0, $v0       	  # save the file descriptor 

read_loop:
    # read byte from file
    li $v0, 14                    # syscall for read file
    move $a0, $s0                 # file descriptor 
    move $a1, $k1       	  # address of dest buffer
    li $a2, 1          		  # buffer length
    syscall             # read byte from file

# keep reading until bytes read <= 0
    blez $v0, read_done

# naively handle exceeding line size by exiting
    slti $t0, $s3, 1024
    beqz $t0, read_done

# load current byte into $s4
    lb $s4, ($k1)
    li $t0, 10                    # ASCII newline character

# Check for newline character
    beq $s4, $t0, handle_newline

# otherwise, append byte to line
    add $s5, $s3, $k0
    sb $s4, ($s5)

# increment line length
    addi $s3, $s3, 1

# Continue reading
    b read_loop

handle_newline:
# Check if line is empty
    beq $s3,1, print_newline_msg  # If line length is 0, print newline_msg

# increment equation count
     lw $t1, max_count           # Load max count value into $t1
     lw $t2, count               # Load address of counter into $t2# Increment
     addi $t2, $t2, 1            # Increment $t0 by 1
# Store updated counter value back in global memory
     sw $t2, count
     beq $t1, $t2, print_error_format    # If counter ($t0) > max_count ($t1), exit loop
     
# Process non-empty line
    add $s5, $s3, $k0
    sb $zero, ($s5)              # Null terminate line
    
    li $t4, 1                    # Load immediate value 1 into $t3
    li $t5, 2
    li $t6, 3
    beq $t2, $t4, copy_Equation1 
    beq $t2, $t5, copy_Equation2 
    beq $t2, $t6, copy_Equation3 
 
copy_Equation1:
# Copy line to equation1 (writable space)
    la $t1, equation1            # Load the address of equation_in into $t1
    la $t2, line                 # Load the address of 'line' into $t2
    j copy_line
copy_Equation2:
# Copy line to equation2 (writable space)
    la $t1, equation2            # Load the address of equation_in into $t1
    la $t2, line                 # Load the address of 'line' into $t2
    j copy_line
copy_Equation3:
# Copy line to equation3 (writable space)
    la $t1, equation3            # Load the address of equation_in into $t1
    la $t2, line                 # Load the address of 'line' into $t2
    j copy_line
copy_line:
    lb $t3, ($t2)                # Load byte from line
    sb $t3, ($t1)                # Store byte in equation_in
    beq $t3, $zero, end_copy     # Exit loop when null terminator is reached
    addi $t1, $t1, 1             # Move to the next byte in equation_in
    addi $t2, $t2, 1             # Move to the next byte in line
    j copy_line

print_newline_msg:
     lw $t1, max_count           # Load max count value into $t1
     lw $t2, count               # Load address of counter into $t2
     lw $t3,De_count
     move $t3, $t2
     beq $t1, $t2, read_loop     # If counter ($t0) > max_count ($t1), exit loop
     sw $t2, De_count
     
#///////////////////////////////////////////////////////////////////////////////////////////////
# Initialize registers for variable counting
    la $t0, equation1            # Pointer to current position in buffer
    li $t9, 0                    # Variable counter
    li $t8, 0                    # Invalid variable flag
#//////////////////////////////////////////////////
 la $t0, equation1               # $t0 will hold the address of source
 la $t1, equation                # $t1 will hold the address of destination   
 li $t2, 1024                    # $t2 will count the remaining bytes to copy
copy_loop:
    blez $t2, count_variabl      # If $t2 <= 0, end copying
    lb $t3, 0($t0)               # Load byte from address in $t0 (source) into $t3
    sb $t3, 0($t1)               # Store byte from $t3 into address in $t1 (destination)
    addi $t0, $t0, 1             # Increment source address by 1
    addi $t1, $t1, 1             # Increment destination address by 1
    addi $t2, $t2, -1            # Decrement the counter
    j copy_loop
#//////////////////////////////////////////////////////////////  
 Initialize_eqution2:
    la $t0, equation2            # Pointer to current position in buffer
    li $t9, 0                    # Variable counter
    li $t8, 0                    # Invalid variable flagv
 #/////////////////////////////////////////////////////////////////////////////////////
    la $t0, equation2            # $t0 will hold the address of source
    la $t1, equation             # $t1 will hold the address of destination   
    li $t2, 1024                 # $t2 will count the remaining bytes to copy
    j copy_loop
 #///////////////////////////////////////////////////////////////////////////////////
    Initialize_eqution3:
    la $t0, equation3    	 # Pointer to current position in buffer
    li $t9, 0         		 # Variable counter
    li $t8, 0         		 # Invalid variable flagv
 #//////////////////////////////////////////////////
    la $t0, equation3            # $t0 will hold the address of source
    la $t1, equation             # $t1 will hold the address of destination   
    li $t2, 1024                 # $t2 will count the remaining bytes to copy
    j copy_loop
#//////////////////////////////////////////////////////////////  
count_variabl:
    la $t0, equation    	 # Pointer to current position in buffer
    li $t9, 0         		 # Variable counter
    li $t8, 0         		 # Invalid variable flagv
count_variables:
    
    lb $t6, 0($t0)               # Load current character from buffer
    beqz $t6, check_count        # End of string, go to count check

# Check if the character is 'x', 'y', or 'z'
    li $t7, 'x'
    beq $t6, $t7, increment_counter
    li $t7, 'y'
    beq $t6, $t7, increment_counter
    li $t7, 'z'
    beq $t6, $t7, increment_counter

# Check if it's an invalid variable (any letter other than 'x', 'y', or 'z')
    li $t7, 'a'
    blt $t6, $t7, next_char_count  # Ignore non-letter characters
    li $t7, 'z'
    bgt $t6, $t7, next_char_count
    li $t8, 1                      # Set flag if an invalid variable is found
    j next_char_count

increment_counter:
    addi $t9, $t9, 1          	   # Increment variable counter
    j next_char_count

next_char_count:
    addi $t0, $t0, 1          	   # Move to the next character
    j count_variables

check_count:
# Check if there were invalid variables or incorrect variable count (2 or 3)
    bne $t8, $zero, print_error_format   # If invalid variable found, print error
    li $t7, 2
    bne $t9, $t7, check_three_vars
    j continue_parsing

check_three_vars:
    li $t7, 3
    bne $t9, $t7, print_error_format     # If not 2 or 3 variables, print error

continue_parsing:
# Reset pointer for parsing after counting
    la $t0, equation
    
#///////////////////////////////////////////////////////////////////////////////////////////    
Initialize:
# Initialize parsing registers
    li $t1, 0         # Accumulated coefficient
    li $t2, 1         # Sign (1 for positive, -1 for negative)
    li $s1, 0         # Coefficient of x
    li $s2, 0         # Coefficient of y
    li $s3, 0         # Coefficient of z
    li $s4, 0         # Result (RHS)
    li $t5, 0         # Result flag (0 = LHS, 1 = RHS)

parse_loop:
    lb $t6, 0($t0)    # Load current character from buffer
    beqz $t6, end_parse     # End if null character is found

# Check for '=' to switch to result side
    beq $t6, '=', switch_to_result

# If on RHS, parse RHS value
    beq $t5, 1, parse_rhs   # If on RHS, parse the RHS result

# Check for signs (+ or -)
    beq $t6, '+', set_positive
    beq $t6, '-', set_negative

# Check if the current character is a digit (0-9)
    li $t7, '0'
    sub $t7, $t6, $t7
    bltz $t7, check_var        # Not a digit, check if it's a variable
    li $t8, 9
    bgt $t7, $t8, check_var    # If greater than 9, not a digit

# Process digit, update accumulated coefficient
    sub $t7, $t6, '0'         # Convert ASCII to integer
    mul $t1, $t1, 10          # Shift left by one decimal place
    add $t1, $t1, $t7         # Add the new digit
    j next_char

check_var:
# Check if the character is 'x', 'y', or 'z'
    li $t7, 'x'
    beq $t6, $t7, store_x
    li $t7, 'y'
    beq $t6, $t7, store_y
    li $t7, 'z'
    beq $t6, $t7, store_z
    j next_char               # Skip other characters

store_x:
    beqz $t1, set_default_x   # If coefficient is zero, set to 1
    j store_x_normal

set_default_x:
    li $t1, 1                 # Set default to 1
    j store_x_normal

store_x_normal:
    mul $t1, $t1, $t2         # Apply sign
    add $s1, $s1, $t1         # Update coefficient for x
    j reset_coeff

store_y:
    beqz $t1, set_default_y   # If coefficient is zero, set to 1
    j store_y_normal

set_default_y:
    li $t1, 1                 # Set default to 1
    j store_y_normal

store_y_normal:
    mul $t1, $t1, $t2         # Apply sign
    add $s2, $s2, $t1         # Update coefficient for y
    j reset_coeff

store_z:
    beqz $t1, set_default_z   # If coefficient is zero, set to 1
    j store_z_normal

set_default_z:
    li $t1, 1                 # Set default to 1
    j store_z_normal

store_z_normal:
    mul $t1, $t1, $t2         # Apply sign
    add $s3, $s3, $t1         # Update coefficient for z
    j reset_coeff

reset_coeff:
    li $t1, 0                 # Reset coefficient accumulator
    li $t2, 1                 # Reset sign to positive
    j next_char

set_positive:
    li $t2, 1                 # Set sign to positive
    j next_char

set_negative:
    li $t2, -1                # Set sign to negative
    j next_char

switch_to_result:
    li $t5, 1                 # Set flag to indicate parsing RHS
    addi $t0, $t0, 1          # Move past the '='
    j parse_loop

parse_rhs:
    # Parse digits for RHS result
    li $t7, '0'
    sub $t7, $t6, $t7
    bltz $t7, next_char       # Skip if not a digit
    li $t8, 9
    bgt $t7, $t8, next_char   # Skip if greater than 9

    sub $t7, $t6, '0'         # Convert ASCII to integer
    mul $s4, $s4, 10          # Shift left by one decimal place
    add $s4, $s4, $t7         # Add the new digit
    j next_char

next_char:
    addi $t0, $t0, 1          # Move to the next character
    j parse_loop
#///////////////////////////////////////////////////////////////////////////////////////////////
end_parse:
#store the coefficient 

#equation1:
     li $t1, 1                          # Load immediate value 1 into $t3
     li $t2, 2
     lw $t4, De_count
     beq $t4,$t2, svae_eqution3
     beq $t4,$t1, svae_eqution2  
     
#///////////////////////////////////////////////////////////
     lw $t4, x1           # Load address of counter into $t2
     lw $t5, y1           # Load address of counter into $t2
     lw $t6, z1           # Load address of counter into $t2
     lw $t7, constant1           # Load address of counter into $t2
     sw $s1 ,x1
     sw $s2 ,y1
     sw $s3 ,z1
     sw $s4 ,constant1
     j contune_save
#//////////////////////////////////////////////////////////////////////////   
     svae_eqution3:
     lw $t4, x3           # Load address of counter into $t2
     lw $t5, y3           # Load address of counter into $t2
     lw $t6, z3           # Load address of counter into $t2
     lw $t7, constant3           # Load address of counter into $t2
     sw $s1 ,x3
     sw $s2 ,y3
     sw $s3 ,z3
     sw $s4 ,constant3
     j contune_save
     
     svae_eqution2:
     lw $t4, x2           # Load address of counter into $t2
     lw $t5, y2           # Load address of counter into $t2
     lw $t6, z2           # Load address of counter into $t2
     lw $t7, constant2           # Load address of counter into $t2
     sw $s1 ,x2
     sw $s2 ,y2
     sw $s3 ,z2
     sw $s4 ,constant2
     j contune_save
     
 #//////////////////////////////////////////////////////////////////////////   
contune_save:
     li $t4, 1                          # Load immediate value 1 into $t3
     li $t5, 2
     lw $t2, De_count           # Load address of counter into $t2

     addi $t2,$t2,-1
    
     sw $t2, De_count
     
     beq $t2,$t5, Initialize_eqution3
     beq $t2,$t4, Initialize_eqution2
     
    
     j Reset_space

#///////////////////////////////////////////////////////////////////////////////////////////////

Reset_space:
    la   $a0, equation            # Load address of equation space into $a0
    li   $a1, 1024                # Load size (1024 bytes) into $a1
    jal  reset_space              # Call reset function

    la   $a0, equation1           # Load address of equation1 space into $a0
    li   $a1, 1024                # Load size (1024 bytes) into $a1
    jal  reset_space              # Call reset function

    la   $a0, equation2           # Load address of equation2 space into $a0
    li   $a1, 1024                # Load size (1024 bytes) into $a1
    jal  reset_space              # Call reset function

    la   $a0, equation3           # Load address of equation3 space into $a0
    li   $a1, 1024                # Load size (1024 bytes) into $a1
    jal  reset_space              # Call reset function
    
     li $t2, 0                    # Load zero into $t2
     sw $t2, count                # Store zero back into count
     li $t2, 0                    # Load zero into $t2
     sw $t2, De_count             # Store zero back into De_count
     li $t2, 0                    # Load zero into $t2
     sw $t2, x1                   # Store zero back into x1
     li $t2, 0                    # Load zero into $t2
     sw $t2, x2                   # Store zero back into x2
     li $t2, 0                    # Load zero into $t2
     sw $t2, x3                   # Store zero back into x3
     li $t2, 0                    # Load zero into $t2
     sw $t2, y1                   # Store zero back into y1
     li $t2, 0                    # Load zero into $t2
     sw $t2, y2                   # Store zero back into y2
     li $t2, 0                    # Load zero into $t2
     sw $t2, y3                   # Store zero back into y3
     li $t2, 0                    # Load zero into $t2
     sw $t2, z1			  # Store zero back into z1
     li $t2, 0                    # Load zero into $t2
     sw $t2, z2                   # Store zero back into z2
     li $t2, 0                    # Load zero into $t2
     sw $t2, z3                   # Store zero back into z3
     li $t2, 0                    # Load zero into $t2
     sw $t2, constant1            # Store zero back into constant1
     li $t2, 0                    # Load zero into $t2
     sw $t2, constant2            # Store zero back into constant2
     li $t2, 0                    # Load zero into $t2
     sw $t2, constant3            # Store zero back into constant3
     
     
     li $s3, 0 
    j read_loop  
 
#////////////////////////////////////////////////////////////////////////////////////////
# Function to reset memory space (clear it by writing 0s)
reset_space:
    # $a0 = address, $a1 = size
    li   $t0, 0                    # Set $t0 to 0 (value to store in memory)
    move $t2, $a1                  # Copy size into $t2 (byte counter)
    
reset_loop:
    sb   $t0, 0($a0)               # Store byte 0 at address in $a0
    addi $a0, $a0, 1               # Increment address by 1 byte
    addi $t2, $t2, -1              # Decrement byte counter
    bgtz $t2, reset_loop           # Loop if counter > 0
    
    jr   $ra                       # Return from function
           
            
 #///////////////////////////////////////////////////////////////////////////             
error_format:    
    # Reset line length
     li $s3, 0 
     li $t2, 0                       # Load zero into $t2
     sw $t2, count                   # Store zero back into count
     li $t2, 0                       # Load zero into $t2
     sw $t2, De_count                   # Store zero back into count  
     b read_loop            # Go back to reading the next line
#/////////////////////////////////////////////////////////////////////////////////
end_copy:
    # Reset line length and continue reading
    li $s3, 0
    b read_loop
#//////////////////////////////////////////////////////////////////////////////////        
print_error_format :
    la $a0, error_message         # Load address of equation_in
    li $v0, 4            # Syscall for printing string
    syscall  
        
    j error_format
#///////////////////////////////////////////////////////////////////////////////////    
read_done:
    # close file
    li $v0, 16           # syscall for close file
    move $a0, $s0        # file descriptor to close
    syscall              # close file

    # exit the program
    li $v0, 10
    syscall
    
 
